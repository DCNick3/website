/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * InNoHassle Events API
 * API of Events project in InNoHassle Ecosystem.
 * OpenAPI spec version: 0.1.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { axiosInstance } from "./axios-instance";

export type AuthGetDevTokenParams = {
  email?: string;
};

export type EventGroupsFindEventGroupByPathParams = {
  path: string;
};

export type UsersHideFavoriteParams = {
  group_id: number;
  hide?: boolean;
};

export type UsersDeleteFavoriteParams = {
  group_id: number;
};

export type UsersAddFavoriteParams = {
  group_id: number;
};

export interface ViewUserApp {
  id: number;
  email: string;
  name?: string;
  status?: string;
  favorites?: UserXGroupViewApp[];
}

export type ViewEventGroupSatellite = { [key: string]: any };

/**
 * Represents a group instance from the database excluding sensitive information.
 */
export interface ViewEventGroup {
  id: number;
  path: string;
  name?: string;
  type?: string;
  satellite?: ViewEventGroupSatellite;
}

export interface VersionInfo {
  title?: string;
  description?: string;
  version?: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * Represents a group instance from the database excluding sensitive information.
 */
export interface UserXGroupViewApp {
  user_id: number;
  group: ViewEventGroup;
  hidden: boolean;
  predefined?: boolean;
}

/**
 * Represents a list of event groups.
 */
export interface ListEventGroupsResponse {
  groups: ViewEventGroup[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * Get current user info if authenticated
 * @summary Get Me
 */
export const usersGetMe = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ViewUserApp>(
    { url: `/users/me`, method: "get", signal },
    options
  );
};

export const getUsersGetMeQueryKey = () => [`/users/me`] as const;

export const getUsersGetMeQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGetMe>>,
  TError = void
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersGetMe>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof usersGetMe>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersGetMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetMe>>> = ({
    signal,
  }) => usersGetMe(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type UsersGetMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersGetMe>>
>;
export type UsersGetMeQueryError = void;

/**
 * @summary Get Me
 */
export const useUsersGetMe = <
  TData = Awaited<ReturnType<typeof usersGetMe>>,
  TError = void
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersGetMe>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersGetMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add favorite to current user
 * @summary Add Favorite
 */
export const usersAddFavorite = (
  params: UsersAddFavoriteParams,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<ViewUserApp>(
    { url: `/users/me/favorites`, method: "post", params },
    options
  );
};

export const getUsersAddFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    TError,
    { params: UsersAddFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersAddFavorite>>,
  TError,
  { params: UsersAddFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    { params: UsersAddFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersAddFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersAddFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersAddFavorite>>
>;

export type UsersAddFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Add Favorite
 */
export const useUsersAddFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    TError,
    { params: UsersAddFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUsersAddFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete favorite from current user
 * @summary Delete Favorite
 */
export const usersDeleteFavorite = (
  params: UsersDeleteFavoriteParams,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<ViewUserApp>(
    { url: `/users/me/favorites`, method: "delete", params },
    options
  );
};

export const getUsersDeleteFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    TError,
    { params: UsersDeleteFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersDeleteFavorite>>,
  TError,
  { params: UsersDeleteFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    { params: UsersDeleteFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersDeleteFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersDeleteFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersDeleteFavorite>>
>;

export type UsersDeleteFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Delete Favorite
 */
export const useUsersDeleteFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    TError,
    { params: UsersDeleteFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUsersDeleteFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Hide favorite from current user
 * @summary Hide Favorite
 */
export const usersHideFavorite = (
  params: UsersHideFavoriteParams,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<ViewUserApp>(
    { url: `/users/me/favorites/hide`, method: "post", params },
    options
  );
};

export const getUsersHideFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    TError,
    { params: UsersHideFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersHideFavorite>>,
  TError,
  { params: UsersHideFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    { params: UsersHideFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersHideFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersHideFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersHideFavorite>>
>;

export type UsersHideFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Hide Favorite
 */
export const useUsersHideFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    TError,
    { params: UsersHideFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUsersHideFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get event group info by path
 * @summary Find Event Group By Path
 */
export const eventGroupsFindEventGroupByPath = (
  params: EventGroupsFindEventGroupByPathParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ViewEventGroup>(
    { url: `/event-groups/by-path`, method: "get", params, signal },
    options
  );
};

export const getEventGroupsFindEventGroupByPathQueryKey = (
  params: EventGroupsFindEventGroupByPathParams
) => [`/event-groups/by-path`, ...(params ? [params] : [])] as const;

export const getEventGroupsFindEventGroupByPathQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
  TError = void | HTTPValidationError
>(
  params: EventGroupsFindEventGroupByPathParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEventGroupsFindEventGroupByPathQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>
  > = ({ signal }) =>
    eventGroupsFindEventGroupByPath(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type EventGroupsFindEventGroupByPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>
>;
export type EventGroupsFindEventGroupByPathQueryError =
  void | HTTPValidationError;

/**
 * @summary Find Event Group By Path
 */
export const useEventGroupsFindEventGroupByPath = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
  TError = void | HTTPValidationError
>(
  params: EventGroupsFindEventGroupByPathParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsFindEventGroupByPathQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get event group info by id
 * @summary Get Event Group
 */
export const eventGroupsGetEventGroup = (
  eventGroupId: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ViewEventGroup>(
    { url: `/event-groups/${eventGroupId}`, method: "get", signal },
    options
  );
};

export const getEventGroupsGetEventGroupQueryKey = (eventGroupId: number) =>
  [`/event-groups/${eventGroupId}`] as const;

export const getEventGroupsGetEventGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
  TError = void | HTTPValidationError
>(
  eventGroupId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEventGroupsGetEventGroupQueryKey(eventGroupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsGetEventGroup>>
  > = ({ signal }) =>
    eventGroupsGetEventGroup(eventGroupId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!eventGroupId, ...queryOptions };
};

export type EventGroupsGetEventGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsGetEventGroup>>
>;
export type EventGroupsGetEventGroupQueryError = void | HTTPValidationError;

/**
 * @summary Get Event Group
 */
export const useEventGroupsGetEventGroup = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
  TError = void | HTTPValidationError
>(
  eventGroupId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsGetEventGroupQueryOptions(
    eventGroupId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a list of all event groups
 * @summary List Event Groups
 */
export const eventGroupsListEventGroups = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ListEventGroupsResponse>(
    { url: `/event-groups/`, method: "get", signal },
    options
  );
};

export const getEventGroupsListEventGroupsQueryKey = () =>
  [`/event-groups/`] as const;

export const getEventGroupsListEventGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEventGroupsListEventGroupsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsListEventGroups>>
  > = ({ signal }) => eventGroupsListEventGroups(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type EventGroupsListEventGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsListEventGroups>>
>;
export type EventGroupsListEventGroupsQueryError = unknown;

/**
 * @summary List Event Groups
 */
export const useEventGroupsListEventGroups = <
  TData = Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsListEventGroupsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Dev Token
 */
export const authGetDevToken = (
  params?: AuthGetDevTokenParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<string>(
    { url: `/auth/dev/token`, method: "get", params, signal },
    options
  );
};

export const getAuthGetDevTokenQueryKey = (params?: AuthGetDevTokenParams) =>
  [`/auth/dev/token`, ...(params ? [params] : [])] as const;

export const getAuthGetDevTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetDevToken>>,
  TError = HTTPValidationError
>(
  params?: AuthGetDevTokenParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authGetDevToken>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof authGetDevToken>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthGetDevTokenQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authGetDevToken>>> = ({
    signal,
  }) => authGetDevToken(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthGetDevTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof authGetDevToken>>
>;
export type AuthGetDevTokenQueryError = HTTPValidationError;

/**
 * @summary Get Dev Token
 */
export const useAuthGetDevToken = <
  TData = Awaited<ReturnType<typeof authGetDevToken>>,
  TError = HTTPValidationError
>(
  params?: AuthGetDevTokenParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authGetDevToken>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthGetDevTokenQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Dev Parser Token
 */
export const authGetDevParserToken = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<string>(
    { url: `/auth/dev/parser-token`, method: "get", signal },
    options
  );
};

export const getAuthGetDevParserTokenQueryKey = () =>
  [`/auth/dev/parser-token`] as const;

export const getAuthGetDevParserTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetDevParserToken>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authGetDevParserToken>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof authGetDevParserToken>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthGetDevParserTokenQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authGetDevParserToken>>
  > = ({ signal }) => authGetDevParserToken(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthGetDevParserTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof authGetDevParserToken>>
>;
export type AuthGetDevParserTokenQueryError = unknown;

/**
 * @summary Get Dev Parser Token
 */
export const useAuthGetDevParserToken = <
  TData = Awaited<ReturnType<typeof authGetDevParserToken>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authGetDevParserToken>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthGetDevParserTokenQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Version
 */
export const systemVersion = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<VersionInfo>(
    { url: `/`, method: "get", signal },
    options
  );
};

export const getSystemVersionQueryKey = () => [`/`] as const;

export const getSystemVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof systemVersion>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof systemVersion>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof systemVersion>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSystemVersionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemVersion>>> = ({
    signal,
  }) => systemVersion(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type SystemVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemVersion>>
>;
export type SystemVersionQueryError = unknown;

/**
 * @summary Version
 */
export const useSystemVersion = <
  TData = Awaited<ReturnType<typeof systemVersion>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof systemVersion>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemVersionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
