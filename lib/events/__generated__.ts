/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * InNoHassle Events API
 * API of Events project in InNoHassle Ecosystem.
 * OpenAPI spec version: 0.1.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { axiosInstance } from "./axios-instance";

export type AuthGetDevTokenParams = {
  email?: string;
};

export type EventGroupsFindEventGroupByAliasParams = {
  alias: string;
};

export type EventGroupsFindEventGroupByPathParams = {
  path: string;
};

export type UsersHideFavoriteParams = {
  group_id: number;
  hide?: boolean;
};

export type UsersDeleteFavoriteParams = {
  group_id: number;
};

export type UsersAddFavoriteParams = {
  group_id: number;
};

export interface ViewWorkshop {
  id: number;
  alias: string;
  name: string;
  date: string;
  speaker?: string;
  capacity?: number;
  comment?: string;
  location?: string;
  timeslots?: Timeslot[];
  checkin_count?: number;
}

/**
 * Represents a user instance from the database excluding sensitive information.
 */
export interface ViewUser {
  id: number;
  email: string;
  name?: string;
  favorites_association?: UserXFavoriteGroupView[];
}

export type ViewTagSatellite = { [key: string]: any };

/**
 * Represents a group instance from the database excluding sensitive information.
 */
export interface ViewEventGroup {
  id: number;
  alias: string;
  path?: string;
  name?: string;
  description?: string;
  tags?: ViewTag[];
  ownerships?: Ownership[];
}

export interface VersionInfo {
  title?: string;
  description?: string;
  version?: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * Represents a group instance from the database excluding sensitive information.
 */
export interface UserXFavoriteGroupView {
  user_id: number;
  event_group: ViewEventGroup;
  hidden: boolean;
  predefined?: boolean;
}

/**
 * Represents a group instance to be updated.
 */
export interface UpdateEventGroup {
  alias?: string;
  name?: string;
  description?: string;
  path?: string;
}

export interface Timeslot {
  workshop_id: number;
  sequence: number;
  start: string;
  end: string;
}

/**
 * An enumeration.
 */
export type OwnershipEnum = (typeof OwnershipEnum)[keyof typeof OwnershipEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OwnershipEnum = {
  default: "default",
  moderator: "moderator",
  owner: "owner",
  delete: "delete",
} as const;

export interface Ownership {
  user_id: number;
  object_id: number;
  role_alias: OwnershipEnum;
}

export interface ViewTag {
  id: number;
  alias: string;
  type?: string;
  name?: string;
  satellite?: ViewTagSatellite;
  ownerships?: Ownership[];
}

export interface ListWorkshopsResponse {
  workshops: ViewWorkshop[];
}

export interface ListTagsResponse {
  tags: ViewTag[];
}

/**
 * Represents a list of event groups.
 */
export interface ListEventGroupsResponse {
  groups: ViewEventGroup[];
}

export interface ListCheckInResponse {
  check_ins: CheckIn[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

/**
 * Represents a group instance to be created.
 */
export interface CreateEventGroup {
  alias: string;
  name: string;
  path?: string;
  description?: string;
}

export interface CheckIn {
  workshop_id: number;
  user_id: number;
  timeslot_sequence: number;
  dtstamp: string;
}

export interface BodyEventGroupsSetEventGroupIcs {
  ics_file: Blob;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Get current user info if authenticated
 * @summary Get Me
 */
export const usersGetMe = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ViewUser>(
    { url: `/users/me`, method: "get", signal },
    options,
  );
};

export const getUsersGetMeQueryKey = () => [`/users/me`] as const;

export const getUsersGetMeQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGetMe>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersGetMe>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof usersGetMe>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersGetMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetMe>>> = ({
    signal,
  }) => usersGetMe(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type UsersGetMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersGetMe>>
>;
export type UsersGetMeQueryError = void;

/**
 * @summary Get Me
 */
export const useUsersGetMe = <
  TData = Awaited<ReturnType<typeof usersGetMe>>,
  TError = void,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersGetMe>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersGetMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the user
 * @summary Get My Schedule
 */
export const usersGetMySchedule = (
  userId: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<unknown | Blob>(
    { url: `/users/ics/${userId}`, method: "get", signal },
    options,
  );
};

export const getUsersGetMyScheduleQueryKey = (userId: number) =>
  [`/users/ics/${userId}`] as const;

export const getUsersGetMyScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGetMySchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersGetMySchedule>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof usersGetMySchedule>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersGetMyScheduleQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersGetMySchedule>>
  > = ({ signal }) => usersGetMySchedule(userId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions };
};

export type UsersGetMyScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersGetMySchedule>>
>;
export type UsersGetMyScheduleQueryError = void | HTTPValidationError;

/**
 * @summary Get My Schedule
 */
export const useUsersGetMySchedule = <
  TData = Awaited<ReturnType<typeof usersGetMySchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersGetMySchedule>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersGetMyScheduleQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add favorite to current user
 * @summary Add Favorite
 */
export const usersAddFavorite = (
  params: UsersAddFavoriteParams,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<ViewUser>(
    { url: `/users/me/favorites`, method: "post", params },
    options,
  );
};

export const getUsersAddFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    TError,
    { params: UsersAddFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersAddFavorite>>,
  TError,
  { params: UsersAddFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    { params: UsersAddFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersAddFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersAddFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersAddFavorite>>
>;

export type UsersAddFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Add Favorite
 */
export const useUsersAddFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    TError,
    { params: UsersAddFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUsersAddFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete favorite from current user
 * @summary Delete Favorite
 */
export const usersDeleteFavorite = (
  params: UsersDeleteFavoriteParams,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<ViewUser>(
    { url: `/users/me/favorites`, method: "delete", params },
    options,
  );
};

export const getUsersDeleteFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    TError,
    { params: UsersDeleteFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersDeleteFavorite>>,
  TError,
  { params: UsersDeleteFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    { params: UsersDeleteFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersDeleteFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersDeleteFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersDeleteFavorite>>
>;

export type UsersDeleteFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Delete Favorite
 */
export const useUsersDeleteFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    TError,
    { params: UsersDeleteFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUsersDeleteFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Hide favorite from current user
 * @summary Hide Favorite
 */
export const usersHideFavorite = (
  params: UsersHideFavoriteParams,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<ViewUser>(
    { url: `/users/me/favorites/hide`, method: "post", params },
    options,
  );
};

export const getUsersHideFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    TError,
    { params: UsersHideFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersHideFavorite>>,
  TError,
  { params: UsersHideFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    { params: UsersHideFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersHideFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersHideFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersHideFavorite>>
>;

export type UsersHideFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Hide Favorite
 */
export const useUsersHideFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    TError,
    { params: UsersHideFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUsersHideFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get a list of all event groups
 * @summary List Event Groups
 */
export const eventGroupsListEventGroups = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ListEventGroupsResponse>(
    { url: `/event-groups/`, method: "get", signal },
    options,
  );
};

export const getEventGroupsListEventGroupsQueryKey = () =>
  [`/event-groups/`] as const;

export const getEventGroupsListEventGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEventGroupsListEventGroupsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsListEventGroups>>
  > = ({ signal }) => eventGroupsListEventGroups(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type EventGroupsListEventGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsListEventGroups>>
>;
export type EventGroupsListEventGroupsQueryError = unknown;

/**
 * @summary List Event Groups
 */
export const useEventGroupsListEventGroups = <
  TData = Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsListEventGroupsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Event Group
 */
export const eventGroupsCreateEventGroup = (
  createEventGroup: CreateEventGroup,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<ViewEventGroup>(
    {
      url: `/event-groups/`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createEventGroup,
    },
    options,
  );
};

export const getEventGroupsCreateEventGroupMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>,
    TError,
    { data: CreateEventGroup },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>,
  TError,
  { data: CreateEventGroup },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>,
    { data: CreateEventGroup }
  > = (props) => {
    const { data } = props ?? {};

    return eventGroupsCreateEventGroup(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventGroupsCreateEventGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>
>;
export type EventGroupsCreateEventGroupMutationBody = CreateEventGroup;
export type EventGroupsCreateEventGroupMutationError =
  void | HTTPValidationError;

/**
 * @summary Create Event Group
 */
export const useEventGroupsCreateEventGroup = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>,
    TError,
    { data: CreateEventGroup },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions =
    getEventGroupsCreateEventGroupMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get event group info by id
 * @summary Get Event Group
 */
export const eventGroupsGetEventGroup = (
  eventGroupId: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ViewEventGroup>(
    { url: `/event-groups/${eventGroupId}`, method: "get", signal },
    options,
  );
};

export const getEventGroupsGetEventGroupQueryKey = (eventGroupId: number) =>
  [`/event-groups/${eventGroupId}`] as const;

export const getEventGroupsGetEventGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
  TError = void | HTTPValidationError,
>(
  eventGroupId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEventGroupsGetEventGroupQueryKey(eventGroupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsGetEventGroup>>
  > = ({ signal }) =>
    eventGroupsGetEventGroup(eventGroupId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!eventGroupId, ...queryOptions };
};

export type EventGroupsGetEventGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsGetEventGroup>>
>;
export type EventGroupsGetEventGroupQueryError = void | HTTPValidationError;

/**
 * @summary Get Event Group
 */
export const useEventGroupsGetEventGroup = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
  TError = void | HTTPValidationError,
>(
  eventGroupId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsGetEventGroupQueryOptions(
    eventGroupId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update Event Group
 */
export const eventGroupsUpdateEventGroup = (
  eventGroupId: number,
  updateEventGroup: UpdateEventGroup,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<ViewEventGroup>(
    {
      url: `/event-groups/${eventGroupId}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: updateEventGroup,
    },
    options,
  );
};

export const getEventGroupsUpdateEventGroupMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>,
    TError,
    { eventGroupId: number; data: UpdateEventGroup },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>,
  TError,
  { eventGroupId: number; data: UpdateEventGroup },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>,
    { eventGroupId: number; data: UpdateEventGroup }
  > = (props) => {
    const { eventGroupId, data } = props ?? {};

    return eventGroupsUpdateEventGroup(eventGroupId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventGroupsUpdateEventGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>
>;
export type EventGroupsUpdateEventGroupMutationBody = UpdateEventGroup;
export type EventGroupsUpdateEventGroupMutationError =
  void | HTTPValidationError;

/**
 * @summary Update Event Group
 */
export const useEventGroupsUpdateEventGroup = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>,
    TError,
    { eventGroupId: number; data: UpdateEventGroup },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions =
    getEventGroupsUpdateEventGroupMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get event group info by path
 * @summary Find Event Group By Path
 */
export const eventGroupsFindEventGroupByPath = (
  params: EventGroupsFindEventGroupByPathParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ViewEventGroup>(
    { url: `/event-groups/by-path`, method: "get", params, signal },
    options,
  );
};

export const getEventGroupsFindEventGroupByPathQueryKey = (
  params: EventGroupsFindEventGroupByPathParams,
) => [`/event-groups/by-path`, ...(params ? [params] : [])] as const;

export const getEventGroupsFindEventGroupByPathQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
  TError = void | HTTPValidationError,
>(
  params: EventGroupsFindEventGroupByPathParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEventGroupsFindEventGroupByPathQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>
  > = ({ signal }) =>
    eventGroupsFindEventGroupByPath(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type EventGroupsFindEventGroupByPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>
>;
export type EventGroupsFindEventGroupByPathQueryError =
  void | HTTPValidationError;

/**
 * @summary Find Event Group By Path
 */
export const useEventGroupsFindEventGroupByPath = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
  TError = void | HTTPValidationError,
>(
  params: EventGroupsFindEventGroupByPathParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsFindEventGroupByPathQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get event group info by alias
 * @summary Find Event Group By Alias
 */
export const eventGroupsFindEventGroupByAlias = (
  params: EventGroupsFindEventGroupByAliasParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ViewEventGroup>(
    { url: `/event-groups/by-alias`, method: "get", params, signal },
    options,
  );
};

export const getEventGroupsFindEventGroupByAliasQueryKey = (
  params: EventGroupsFindEventGroupByAliasParams,
) => [`/event-groups/by-alias`, ...(params ? [params] : [])] as const;

export const getEventGroupsFindEventGroupByAliasQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
  TError = void | HTTPValidationError,
>(
  params: EventGroupsFindEventGroupByAliasParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEventGroupsFindEventGroupByAliasQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>
  > = ({ signal }) =>
    eventGroupsFindEventGroupByAlias(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type EventGroupsFindEventGroupByAliasQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>
>;
export type EventGroupsFindEventGroupByAliasQueryError =
  void | HTTPValidationError;

/**
 * @summary Find Event Group By Alias
 */
export const useEventGroupsFindEventGroupByAlias = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
  TError = void | HTTPValidationError,
>(
  params: EventGroupsFindEventGroupByAliasParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsFindEventGroupByAliasQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get event group .ics file by id
 * @summary Get Event Group Ics
 */
export const eventGroupsGetEventGroupIcs = (
  eventGroupId: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<Blob>(
    {
      url: `/event-groups/${eventGroupId}/ics`,
      method: "get",
      responseType: "blob",
      signal,
    },
    options,
  );
};

export const getEventGroupsGetEventGroupIcsQueryKey = (eventGroupId: number) =>
  [`/event-groups/${eventGroupId}/ics`] as const;

export const getEventGroupsGetEventGroupIcsQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroupIcs>>,
  TError = void | HTTPValidationError,
>(
  eventGroupId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsGetEventGroupIcs>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsGetEventGroupIcs>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEventGroupsGetEventGroupIcsQueryKey(eventGroupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsGetEventGroupIcs>>
  > = ({ signal }) =>
    eventGroupsGetEventGroupIcs(eventGroupId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!eventGroupId, ...queryOptions };
};

export type EventGroupsGetEventGroupIcsQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsGetEventGroupIcs>>
>;
export type EventGroupsGetEventGroupIcsQueryError = void | HTTPValidationError;

/**
 * @summary Get Event Group Ics
 */
export const useEventGroupsGetEventGroupIcs = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroupIcs>>,
  TError = void | HTTPValidationError,
>(
  eventGroupId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsGetEventGroupIcs>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsGetEventGroupIcsQueryOptions(
    eventGroupId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Load .ics file to event group by event group id and save file to predefined path
 * @summary Set Event Group Ics
 */
export const eventGroupsSetEventGroupIcs = (
  eventGroupId: number,
  bodyEventGroupsSetEventGroupIcs: BodyEventGroupsSetEventGroupIcs,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  const formData = new FormData();
  formData.append("ics_file", bodyEventGroupsSetEventGroupIcs.ics_file);

  return axiosInstance<unknown>(
    {
      url: `/event-groups/${eventGroupId}/ics`,
      method: "put",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const getEventGroupsSetEventGroupIcsMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>,
    TError,
    { eventGroupId: number; data: BodyEventGroupsSetEventGroupIcs },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>,
  TError,
  { eventGroupId: number; data: BodyEventGroupsSetEventGroupIcs },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>,
    { eventGroupId: number; data: BodyEventGroupsSetEventGroupIcs }
  > = (props) => {
    const { eventGroupId, data } = props ?? {};

    return eventGroupsSetEventGroupIcs(eventGroupId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventGroupsSetEventGroupIcsMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>
>;
export type EventGroupsSetEventGroupIcsMutationBody =
  BodyEventGroupsSetEventGroupIcs;
export type EventGroupsSetEventGroupIcsMutationError =
  void | HTTPValidationError;

/**
 * @summary Set Event Group Ics
 */
export const useEventGroupsSetEventGroupIcs = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>,
    TError,
    { eventGroupId: number; data: BodyEventGroupsSetEventGroupIcs },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions =
    getEventGroupsSetEventGroupIcsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get event group .ics file by id
 * @summary Get Event Group Ics By Alias
 */
export const eventGroupsGetEventGroupIcsByAlias = (
  eventGroupAlias: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<Blob>(
    {
      url: `/event-groups/ics/${eventGroupAlias}.ics`,
      method: "get",
      responseType: "blob",
      signal,
    },
    options,
  );
};

export const getEventGroupsGetEventGroupIcsByAliasQueryKey = (
  eventGroupAlias: string,
) => [`/event-groups/ics/${eventGroupAlias}.ics`] as const;

export const getEventGroupsGetEventGroupIcsByAliasQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroupIcsByAlias>>,
  TError = void | HTTPValidationError,
>(
  eventGroupAlias: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsGetEventGroupIcsByAlias>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof eventGroupsGetEventGroupIcsByAlias>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEventGroupsGetEventGroupIcsByAliasQueryKey(eventGroupAlias);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsGetEventGroupIcsByAlias>>
  > = ({ signal }) =>
    eventGroupsGetEventGroupIcsByAlias(eventGroupAlias, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!eventGroupAlias, ...queryOptions };
};

export type EventGroupsGetEventGroupIcsByAliasQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsGetEventGroupIcsByAlias>>
>;
export type EventGroupsGetEventGroupIcsByAliasQueryError =
  void | HTTPValidationError;

/**
 * @summary Get Event Group Ics By Alias
 */
export const useEventGroupsGetEventGroupIcsByAlias = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroupIcsByAlias>>,
  TError = void | HTTPValidationError,
>(
  eventGroupAlias: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsGetEventGroupIcsByAlias>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventGroupsGetEventGroupIcsByAliasQueryOptions(
    eventGroupAlias,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Dev Token
 */
export const authGetDevToken = (
  params?: AuthGetDevTokenParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<string>(
    { url: `/auth/dev/token`, method: "get", params, signal },
    options,
  );
};

export const getAuthGetDevTokenQueryKey = (params?: AuthGetDevTokenParams) =>
  [`/auth/dev/token`, ...(params ? [params] : [])] as const;

export const getAuthGetDevTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetDevToken>>,
  TError = HTTPValidationError,
>(
  params?: AuthGetDevTokenParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authGetDevToken>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof authGetDevToken>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthGetDevTokenQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authGetDevToken>>> = ({
    signal,
  }) => authGetDevToken(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthGetDevTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof authGetDevToken>>
>;
export type AuthGetDevTokenQueryError = HTTPValidationError;

/**
 * @summary Get Dev Token
 */
export const useAuthGetDevToken = <
  TData = Awaited<ReturnType<typeof authGetDevToken>>,
  TError = HTTPValidationError,
>(
  params?: AuthGetDevTokenParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authGetDevToken>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthGetDevTokenQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Dev Parser Token
 */
export const authGetDevParserToken = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<string>(
    { url: `/auth/dev/parser-token`, method: "get", signal },
    options,
  );
};

export const getAuthGetDevParserTokenQueryKey = () =>
  [`/auth/dev/parser-token`] as const;

export const getAuthGetDevParserTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetDevParserToken>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authGetDevParserToken>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof authGetDevParserToken>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthGetDevParserTokenQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authGetDevParserToken>>
  > = ({ signal }) => authGetDevParserToken(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthGetDevParserTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof authGetDevParserToken>>
>;
export type AuthGetDevParserTokenQueryError = unknown;

/**
 * @summary Get Dev Parser Token
 */
export const useAuthGetDevParserToken = <
  TData = Awaited<ReturnType<typeof authGetDevParserToken>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authGetDevParserToken>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthGetDevParserTokenQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a list of all tags
 * @summary List Tags
 */
export const tagsListTags = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ListTagsResponse>(
    { url: `/tags/`, method: "get", signal },
    options,
  );
};

export const getTagsListTagsQueryKey = () => [`/tags/`] as const;

export const getTagsListTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof tagsListTags>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof tagsListTags>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof tagsListTags>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTagsListTagsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tagsListTags>>> = ({
    signal,
  }) => tagsListTags(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type TagsListTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof tagsListTags>>
>;
export type TagsListTagsQueryError = unknown;

/**
 * @summary List Tags
 */
export const useTagsListTags = <
  TData = Awaited<ReturnType<typeof tagsListTags>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof tagsListTags>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTagsListTagsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * List all workshops
 * @summary List Workshops
 */
export const workshopsListWorkshops = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ListWorkshopsResponse>(
    { url: `/workshops/`, method: "get", signal },
    options,
  );
};

export const getWorkshopsListWorkshopsQueryKey = () => [`/workshops/`] as const;

export const getWorkshopsListWorkshopsQueryOptions = <
  TData = Awaited<ReturnType<typeof workshopsListWorkshops>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof workshopsListWorkshops>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof workshopsListWorkshops>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkshopsListWorkshopsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workshopsListWorkshops>>
  > = ({ signal }) => workshopsListWorkshops(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type WorkshopsListWorkshopsQueryResult = NonNullable<
  Awaited<ReturnType<typeof workshopsListWorkshops>>
>;
export type WorkshopsListWorkshopsQueryError = unknown;

/**
 * @summary List Workshops
 */
export const useWorkshopsListWorkshops = <
  TData = Awaited<ReturnType<typeof workshopsListWorkshops>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof workshopsListWorkshops>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getWorkshopsListWorkshopsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * List all checkins for current user
 * @summary List Workshops User Check In
 */
export const workshopsListWorkshopsUserCheckIn = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ListCheckInResponse>(
    { url: `/workshops/user-check-in/`, method: "get", signal },
    options,
  );
};

export const getWorkshopsListWorkshopsUserCheckInQueryKey = () =>
  [`/workshops/user-check-in/`] as const;

export const getWorkshopsListWorkshopsUserCheckInQueryOptions = <
  TData = Awaited<ReturnType<typeof workshopsListWorkshopsUserCheckIn>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof workshopsListWorkshopsUserCheckIn>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof workshopsListWorkshopsUserCheckIn>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkshopsListWorkshopsUserCheckInQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workshopsListWorkshopsUserCheckIn>>
  > = ({ signal }) => workshopsListWorkshopsUserCheckIn(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type WorkshopsListWorkshopsUserCheckInQueryResult = NonNullable<
  Awaited<ReturnType<typeof workshopsListWorkshopsUserCheckIn>>
>;
export type WorkshopsListWorkshopsUserCheckInQueryError = unknown;

/**
 * @summary List Workshops User Check In
 */
export const useWorkshopsListWorkshopsUserCheckIn = <
  TData = Awaited<ReturnType<typeof workshopsListWorkshopsUserCheckIn>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof workshopsListWorkshopsUserCheckIn>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getWorkshopsListWorkshopsUserCheckInQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get workshop info
 * @summary Get Workshop
 */
export const workshopsGetWorkshop = (
  workshopId: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ViewWorkshop>(
    { url: `/workshops/${workshopId}`, method: "get", signal },
    options,
  );
};

export const getWorkshopsGetWorkshopQueryKey = (workshopId: number) =>
  [`/workshops/${workshopId}`] as const;

export const getWorkshopsGetWorkshopQueryOptions = <
  TData = Awaited<ReturnType<typeof workshopsGetWorkshop>>,
  TError = HTTPValidationError,
>(
  workshopId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof workshopsGetWorkshop>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryOptions<
  Awaited<ReturnType<typeof workshopsGetWorkshop>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWorkshopsGetWorkshopQueryKey(workshopId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof workshopsGetWorkshop>>
  > = ({ signal }) => workshopsGetWorkshop(workshopId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!workshopId, ...queryOptions };
};

export type WorkshopsGetWorkshopQueryResult = NonNullable<
  Awaited<ReturnType<typeof workshopsGetWorkshop>>
>;
export type WorkshopsGetWorkshopQueryError = HTTPValidationError;

/**
 * @summary Get Workshop
 */
export const useWorkshopsGetWorkshop = <
  TData = Awaited<ReturnType<typeof workshopsGetWorkshop>>,
  TError = HTTPValidationError,
>(
  workshopId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof workshopsGetWorkshop>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getWorkshopsGetWorkshopQueryOptions(workshopId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Check-in or Check-out from workshop
 * @summary Check In
 */
export const workshopsCheckIn = (
  workshopId: number,
  checkIn: boolean,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<unknown>(
    { url: `/workshops/${workshopId}/?check_in=${checkIn}`, method: "put" },
    options,
  );
};

export const getWorkshopsCheckInMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workshopsCheckIn>>,
    TError,
    { workshopId: number; checkIn: boolean },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof workshopsCheckIn>>,
  TError,
  { workshopId: number; checkIn: boolean },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof workshopsCheckIn>>,
    { workshopId: number; checkIn: boolean }
  > = (props) => {
    const { workshopId, checkIn } = props ?? {};

    return workshopsCheckIn(workshopId, checkIn, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type WorkshopsCheckInMutationResult = NonNullable<
  Awaited<ReturnType<typeof workshopsCheckIn>>
>;

export type WorkshopsCheckInMutationError = HTTPValidationError;

/**
 * @summary Check In
 */
export const useWorkshopsCheckIn = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof workshopsCheckIn>>,
    TError,
    { workshopId: number; checkIn: boolean },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getWorkshopsCheckInMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Version
 */
export const systemVersion = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<VersionInfo>(
    { url: `/`, method: "get", signal },
    options,
  );
};

export const getSystemVersionQueryKey = () => [`/`] as const;

export const getSystemVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof systemVersion>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof systemVersion>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof systemVersion>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSystemVersionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemVersion>>> = ({
    signal,
  }) => systemVersion(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type SystemVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemVersion>>
>;
export type SystemVersionQueryError = unknown;

/**
 * @summary Version
 */
export const useSystemVersion = <
  TData = Awaited<ReturnType<typeof systemVersion>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof systemVersion>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemVersionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
