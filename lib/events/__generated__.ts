/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * InNoHassle Events API
 * API of Events project in InNoHassle Ecosystem.
 * OpenAPI spec version: 0.1.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import { axiosInstance } from "./axios-instance";

export type AuthGetTokenViaDevParams = {
  email?: string;
};

export type AuthLoginViaDevParams = {
  email?: string;
};

export type UsersDeleteFavoriteParams = {
  favorite: string;
};

export interface ViewGroup {
  name: string;
  type?: string;
  hidden?: boolean;
}

export interface ViewFavorite {
  name: string;
  type?: string;
  hidden?: boolean;
}

/**
 * Represents a user instance from the database excluding sensitive information.
 */
export interface ViewUser {
  email: string;
  name?: string;
  status?: string;
  groups?: ViewGroup[];
  favorites?: ViewFavorite[];
}

export interface VersionInfo {
  title?: string;
  description?: string;
  version?: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface Token {
  access_token: string;
  token_type: string;
}

export type SchemasSchemas = { [key: string]: any };

/**
 * Represents a dictionary of all schemas.
 */
export interface Schemas {
  schemas: SchemasSchemas;
}

export interface ListOfFavorites {
  favorites: ViewFavorite[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface CreateFavorite {
  name: string;
  type?: string;
  hidden?: boolean;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * Get current user info if authenticated
 * @summary Get Me
 */
export const usersGetMe = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<ViewUser>(
    { url: `/users/me`, method: "get", signal },
    options
  );
};

export const getUsersGetMeQueryKey = () => [`/users/me`] as const;

export const getUsersGetMeQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGetMe>>,
  TError = void
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersGetMe>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof usersGetMe>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersGetMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetMe>>> = ({
    signal,
  }) => usersGetMe(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type UsersGetMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersGetMe>>
>;
export type UsersGetMeQueryError = void;

/**
 * @summary Get Me
 */
export const useUsersGetMe = <
  TData = Awaited<ReturnType<typeof usersGetMe>>,
  TError = void
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersGetMe>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersGetMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add favorite to current user
 * @summary Add Favorite
 */
export const usersAddFavorite = (
  createFavorite: CreateFavorite,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<ListOfFavorites>(
    {
      url: `/users/me/favorites`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createFavorite,
    },
    options
  );
};

export const getUsersAddFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    TError,
    { data: CreateFavorite },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersAddFavorite>>,
  TError,
  { data: CreateFavorite },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    { data: CreateFavorite }
  > = (props) => {
    const { data } = props ?? {};

    return usersAddFavorite(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersAddFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersAddFavorite>>
>;
export type UsersAddFavoriteMutationBody = CreateFavorite;
export type UsersAddFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Add Favorite
 */
export const useUsersAddFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    TError,
    { data: CreateFavorite },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUsersAddFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete favorite from current user
 * @summary Delete Favorite
 */
export const usersDeleteFavorite = (
  params: UsersDeleteFavoriteParams,
  options?: SecondParameter<typeof axiosInstance>
) => {
  return axiosInstance<ListOfFavorites>(
    { url: `/users/me/favorites`, method: "delete", params },
    options
  );
};

export const getUsersDeleteFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    TError,
    { params: UsersDeleteFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersDeleteFavorite>>,
  TError,
  { params: UsersDeleteFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    { params: UsersDeleteFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersDeleteFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersDeleteFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersDeleteFavorite>>
>;

export type UsersDeleteFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Delete Favorite
 */
export const useUsersDeleteFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    TError,
    { params: UsersDeleteFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const mutationOptions = getUsersDeleteFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Schemas
 */
export const systemSchemas = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<Schemas>(
    { url: `/schemas`, method: "get", signal },
    options
  );
};

export const getSystemSchemasQueryKey = () => [`/schemas`] as const;

export const getSystemSchemasQueryOptions = <
  TData = Awaited<ReturnType<typeof systemSchemas>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof systemSchemas>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof systemSchemas>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSystemSchemasQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemSchemas>>> = ({
    signal,
  }) => systemSchemas(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type SystemSchemasQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemSchemas>>
>;
export type SystemSchemasQueryError = unknown;

/**
 * @summary Schemas
 */
export const useSystemSchemas = <
  TData = Awaited<ReturnType<typeof systemSchemas>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof systemSchemas>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemSchemasQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Login Via Innopolis
 */
export const authLoginViaInnopolis = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<unknown>(
    { url: `/auth/innopolis/login`, method: "get", signal },
    options
  );
};

export const getAuthLoginViaInnopolisQueryKey = () =>
  [`/auth/innopolis/login`] as const;

export const getAuthLoginViaInnopolisQueryOptions = <
  TData = Awaited<ReturnType<typeof authLoginViaInnopolis>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authLoginViaInnopolis>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof authLoginViaInnopolis>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthLoginViaInnopolisQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authLoginViaInnopolis>>
  > = ({ signal }) => authLoginViaInnopolis(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthLoginViaInnopolisQueryResult = NonNullable<
  Awaited<ReturnType<typeof authLoginViaInnopolis>>
>;
export type AuthLoginViaInnopolisQueryError = unknown;

/**
 * @summary Login Via Innopolis
 */
export const useAuthLoginViaInnopolis = <
  TData = Awaited<ReturnType<typeof authLoginViaInnopolis>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authLoginViaInnopolis>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthLoginViaInnopolisQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Token Via Innopolis
 */
export const authGetTokenViaInnopolis = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<Token>(
    { url: `/auth/innopolis/token`, method: "get", signal },
    options
  );
};

export const getAuthGetTokenViaInnopolisQueryKey = () =>
  [`/auth/innopolis/token`] as const;

export const getAuthGetTokenViaInnopolisQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetTokenViaInnopolis>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authGetTokenViaInnopolis>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof authGetTokenViaInnopolis>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthGetTokenViaInnopolisQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authGetTokenViaInnopolis>>
  > = ({ signal }) => authGetTokenViaInnopolis(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthGetTokenViaInnopolisQueryResult = NonNullable<
  Awaited<ReturnType<typeof authGetTokenViaInnopolis>>
>;
export type AuthGetTokenViaInnopolisQueryError = unknown;

/**
 * @summary Get Token Via Innopolis
 */
export const useAuthGetTokenViaInnopolis = <
  TData = Awaited<ReturnType<typeof authGetTokenViaInnopolis>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authGetTokenViaInnopolis>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthGetTokenViaInnopolisQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Login Via Dev
 */
export const authLoginViaDev = (
  params?: AuthLoginViaDevParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<unknown>(
    { url: `/auth/dev/login`, method: "get", params, signal },
    options
  );
};

export const getAuthLoginViaDevQueryKey = (params?: AuthLoginViaDevParams) =>
  [`/auth/dev/login`, ...(params ? [params] : [])] as const;

export const getAuthLoginViaDevQueryOptions = <
  TData = Awaited<ReturnType<typeof authLoginViaDev>>,
  TError = HTTPValidationError
>(
  params?: AuthLoginViaDevParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authLoginViaDev>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof authLoginViaDev>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthLoginViaDevQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authLoginViaDev>>> = ({
    signal,
  }) => authLoginViaDev(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthLoginViaDevQueryResult = NonNullable<
  Awaited<ReturnType<typeof authLoginViaDev>>
>;
export type AuthLoginViaDevQueryError = HTTPValidationError;

/**
 * @summary Login Via Dev
 */
export const useAuthLoginViaDev = <
  TData = Awaited<ReturnType<typeof authLoginViaDev>>,
  TError = HTTPValidationError
>(
  params?: AuthLoginViaDevParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authLoginViaDev>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthLoginViaDevQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Token Via Dev
 */
export const authGetTokenViaDev = (
  params?: AuthGetTokenViaDevParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<Token>(
    { url: `/auth/dev/token`, method: "get", params, signal },
    options
  );
};

export const getAuthGetTokenViaDevQueryKey = (
  params?: AuthGetTokenViaDevParams
) => [`/auth/dev/token`, ...(params ? [params] : [])] as const;

export const getAuthGetTokenViaDevQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetTokenViaDev>>,
  TError = HTTPValidationError
>(
  params?: AuthGetTokenViaDevParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authGetTokenViaDev>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof authGetTokenViaDev>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthGetTokenViaDevQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authGetTokenViaDev>>
  > = ({ signal }) => authGetTokenViaDev(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthGetTokenViaDevQueryResult = NonNullable<
  Awaited<ReturnType<typeof authGetTokenViaDev>>
>;
export type AuthGetTokenViaDevQueryError = HTTPValidationError;

/**
 * @summary Get Token Via Dev
 */
export const useAuthGetTokenViaDev = <
  TData = Awaited<ReturnType<typeof authGetTokenViaDev>>,
  TError = HTTPValidationError
>(
  params?: AuthGetTokenViaDevParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof authGetTokenViaDev>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof axiosInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAuthGetTokenViaDevQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Version
 */
export const systemVersion = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal
) => {
  return axiosInstance<VersionInfo>(
    { url: `/`, method: "get", signal },
    options
  );
};

export const getSystemVersionQueryKey = () => [`/`] as const;

export const getSystemVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof systemVersion>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof systemVersion>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof systemVersion>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSystemVersionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemVersion>>> = ({
    signal,
  }) => systemVersion(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type SystemVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemVersion>>
>;
export type SystemVersionQueryError = unknown;

/**
 * @summary Version
 */
export const useSystemVersion = <
  TData = Awaited<ReturnType<typeof systemVersion>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof systemVersion>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemVersionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
