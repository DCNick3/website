/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * InNoHassle Events API
 * 
### About this project

This is the API for Events project in InNoHassle ecosystem developed by one-zero-eight community.

Using this API you can browse, view, create and edit schedules at Innopolis University.

Backend is developed using FastAPI framework on Python.

Note: API is unstable. Endpoints and models may change in the future.

Useful links:
- [Backend source code](https://github.com/one-zero-eight/InNoHassle-Events)
- [Frontend source code](https://github.com/one-zero-eight/InNoHassle-Website)
- [Website](https://innohassle.ru/schedule)

 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { axiosQuery } from "./axios";
import { queryOptionsMutator } from "./query";
export type IcsGetEventGroupIcsByAliasParams = {
  user_id: number;
  export_type: string;
};

export type IcsGetUserLinkedSchedule200One = {};

export type IcsGetSportUserSchedule200One = {};

export type IcsGetSportUserScheduleParams = {
  access_key: string;
};

export type IcsGetSportCurrentUserSchedule200One = {};

export type IcsGetMusicRoomUserSchedule200One = {};

export type IcsGetMusicRoomUserScheduleParams = {
  access_key: string;
};

export type IcsGetMusicRoomCurrentUserSchedule200One = {};

export type IcsGetUserSchedule200One = {};

export type IcsGetUserScheduleParams = {
  access_key: string;
};

export type IcsGetCurrentUserSchedule200One = {};

export type EventGroupsSetEventGroupIcs201 = {};

export type EventGroupsFindEventGroupByAliasParams = {
  alias: string;
};

export type EventGroupsFindEventGroupByPathParams = {
  path: string;
};

export type UsersDeleteUserScheduleKey200 = {};

export type UsersDeleteUserScheduleKeyParams = {
  access_key: string;
  resource_path: string;
};

export type UsersGenerateUserScheduleKeyParams = {
  resource_path: string;
};

export type UsersHideTargetParams = {
  hide?: boolean;
};

export type UsersHideFavoriteParams = {
  group_id: number;
  hide?: boolean;
};

export type UsersDeleteFavoriteParams = {
  group_id: number;
};

export type UsersAddFavoriteParams = {
  group_id: number;
};

/**
 * Represents a user schedule key.
 */
export interface ViewUserScheduleKey {
  access_key: string;
  resource_path: string;
  user_id: number;
}

export interface _GetScheduleAccessKeyResponse {
  access_key: ViewUserScheduleKey;
  new: boolean;
}

export type ViewUserName = string | null;

export type ViewUserLinkedCalendars = { [key: string]: LinkedCalendarView };

export type ViewUserInnohassleId = string | null;

/**
 * Represents a user instance from the database excluding sensitive information.
 */
export interface ViewUser {
  email: string;
  favorite_event_groups?: number[];
  hidden_event_groups?: number[];
  id: number;
  innohassle_id?: ViewUserInnohassleId;
  linked_calendars?: ViewUserLinkedCalendars;
  moodle_hidden: boolean;
  music_room_hidden: boolean;
  name?: ViewUserName;
  sports_hidden: boolean;
}

export type ViewTagType = string | null;

export type ViewTagSatelliteAnyOf = { [key: string]: any };

export type ViewTagSatellite = ViewTagSatelliteAnyOf | null;

export type ViewTagName = string | null;

export interface ViewTag {
  alias: string;
  id: number;
  name?: ViewTagName;
  satellite?: ViewTagSatellite;
  type?: ViewTagType;
}

export type ViewEventGroupPath = string | null;

export type ViewEventGroupName = string | null;

export type ViewEventGroupDescription = string | null;

/**
 * Represents a group instance from the database excluding sensitive information.
 */
export interface ViewEventGroup {
  alias: string;
  created_at: string;
  description?: ViewEventGroupDescription;
  id: number;
  name?: ViewEventGroupName;
  path?: ViewEventGroupPath;
  tags?: ViewTag[];
  updated_at: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface UserPredefinedGroupsResponse {
  event_groups: number[];
}

export type UpdateEventGroupPath = string | null;

export type UpdateEventGroupName = string | null;

export type UpdateEventGroupDescription = string | null;

export type UpdateEventGroupAlias = string | null;

/**
 * Represents a group instance to be updated.
 */
export interface UpdateEventGroup {
  alias?: UpdateEventGroupAlias;
  description?: UpdateEventGroupDescription;
  name?: UpdateEventGroupName;
  path?: UpdateEventGroupPath;
}

export interface ListTagsResponse {
  tags: ViewTag[];
}

/**
 * Represents a list of event groups.
 */
export interface ListEventGroupsResponseOutput {
  groups: ViewEventGroup[];
}

/**
 * Represents a list of event groups.
 */
export interface ListEventGroupsResponseInput {
  groups: ViewEventGroup[];
}

export type LinkedCalendarViewName = string | null;

export type LinkedCalendarViewDescription = string | null;

export type LinkedCalendarViewColor = string | null;

/**
 * Represents a linked calendar instance from the database excluding sensitive information.
 */
export interface LinkedCalendarView {
  alias: string;
  color?: LinkedCalendarViewColor;
  description?: LinkedCalendarViewDescription;
  id: number;
  is_active?: boolean;
  name?: LinkedCalendarViewName;
  url: string;
  user_id: number;
}

export type LinkedCalendarCreateName = string | null;

export type LinkedCalendarCreateDescription = string | null;

export type LinkedCalendarCreateColor = string | null;

/**
 * Represents a linked calendar instance to be created.
 */
export interface LinkedCalendarCreate {
  alias: string;
  color?: LinkedCalendarCreateColor;
  description?: LinkedCalendarCreateDescription;
  is_active?: boolean;
  name?: LinkedCalendarCreateName;
  url: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type CreateEventGroupPath = string | null;

export type CreateEventGroupDescription = string | null;

/**
 * Represents a group instance to be created.
 */
export interface CreateEventGroup {
  alias: string;
  description?: CreateEventGroupDescription;
  name: string;
  path?: CreateEventGroupPath;
}

export interface BodyEventGroupsSetEventGroupIcs {
  ics_file: Blob;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Get current user info if authenticated
 * @summary Get Me
 */
export const usersGetMe = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<ViewUser>(
    { url: `/users/me`, method: "GET", signal },
    options,
  );
};

export const getUsersGetMeQueryKey = () => {
  return [`/users/me`] as const;
};

export const useUsersGetMeQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGetMe>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersGetMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersGetMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetMe>>> = ({
    signal,
  }) => usersGetMe(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof usersGetMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersGetMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersGetMe>>
>;
export type UsersGetMeQueryError = void;

/**
 * @summary Get Me
 */
export const useUsersGetMe = <
  TData = Awaited<ReturnType<typeof usersGetMe>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof usersGetMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useUsersGetMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get predefined event groups for user
 * @summary Get Predefined
 */
export const usersGetPredefined = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<UserPredefinedGroupsResponse>(
    { url: `/users/me/predefined`, method: "GET", signal },
    options,
  );
};

export const getUsersGetPredefinedQueryKey = () => {
  return [`/users/me/predefined`] as const;
};

export const useUsersGetPredefinedQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGetPredefined>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersGetPredefined>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersGetPredefinedQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersGetPredefined>>
  > = ({ signal }) => usersGetPredefined(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof usersGetPredefined>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersGetPredefinedQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersGetPredefined>>
>;
export type UsersGetPredefinedQueryError = void;

/**
 * @summary Get Predefined
 */
export const useUsersGetPredefined = <
  TData = Awaited<ReturnType<typeof usersGetPredefined>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersGetPredefined>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useUsersGetPredefinedQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add favorite to current user
 * @summary Add Favorite
 */
export const usersAddFavorite = (
  params: UsersAddFavoriteParams,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<ViewUser>(
    { url: `/users/me/favorites`, method: "POST", params },
    options,
  );
};

export const getUsersAddFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    TError,
    { params: UsersAddFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersAddFavorite>>,
  TError,
  { params: UsersAddFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    { params: UsersAddFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersAddFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersAddFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersAddFavorite>>
>;

export type UsersAddFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Add Favorite
 */
export const useUsersAddFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersAddFavorite>>,
    TError,
    { params: UsersAddFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions = getUsersAddFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete favorite from current user
 * @summary Delete Favorite
 */
export const usersDeleteFavorite = (
  params: UsersDeleteFavoriteParams,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<ViewUser>(
    { url: `/users/me/favorites`, method: "DELETE", params },
    options,
  );
};

export const getUsersDeleteFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    TError,
    { params: UsersDeleteFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersDeleteFavorite>>,
  TError,
  { params: UsersDeleteFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    { params: UsersDeleteFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersDeleteFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersDeleteFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersDeleteFavorite>>
>;

export type UsersDeleteFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Delete Favorite
 */
export const useUsersDeleteFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteFavorite>>,
    TError,
    { params: UsersDeleteFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions = getUsersDeleteFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Hide favorite from current user
 * @summary Hide Favorite
 */
export const usersHideFavorite = (
  params: UsersHideFavoriteParams,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<ViewUser>(
    { url: `/users/me/favorites/hide`, method: "POST", params },
    options,
  );
};

export const getUsersHideFavoriteMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    TError,
    { params: UsersHideFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersHideFavorite>>,
  TError,
  { params: UsersHideFavoriteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    { params: UsersHideFavoriteParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersHideFavorite(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersHideFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersHideFavorite>>
>;

export type UsersHideFavoriteMutationError = void | HTTPValidationError;

/**
 * @summary Hide Favorite
 */
export const useUsersHideFavorite = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersHideFavorite>>,
    TError,
    { params: UsersHideFavoriteParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions = getUsersHideFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Hide music room, sports or moodle from current user
 * @summary Hide Target
 */
export const usersHideTarget = (
  target: "music-room" | "sports" | "moodle",
  params?: UsersHideTargetParams,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<ViewUser>(
    { url: `/users/me/${target}/hide`, method: "POST", params },
    options,
  );
};

export const getUsersHideTargetMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersHideTarget>>,
    TError,
    {
      target: "music-room" | "sports" | "moodle";
      params?: UsersHideTargetParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersHideTarget>>,
  TError,
  {
    target: "music-room" | "sports" | "moodle";
    params?: UsersHideTargetParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersHideTarget>>,
    {
      target: "music-room" | "sports" | "moodle";
      params?: UsersHideTargetParams;
    }
  > = (props) => {
    const { target, params } = props ?? {};

    return usersHideTarget(target, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersHideTargetMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersHideTarget>>
>;

export type UsersHideTargetMutationError = void | HTTPValidationError;

/**
 * @summary Hide Target
 */
export const useUsersHideTarget = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersHideTarget>>,
    TError,
    {
      target: "music-room" | "sports" | "moodle";
      params?: UsersHideTargetParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions = getUsersHideTargetMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Add linked calendar to current user
 * @summary Link Calendar
 */
export const usersLinkCalendar = (
  linkedCalendarCreate: LinkedCalendarCreate,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<LinkedCalendarView>(
    {
      url: `/users/me/linked`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: linkedCalendarCreate,
    },
    options,
  );
};

export const getUsersLinkCalendarMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersLinkCalendar>>,
    TError,
    { data: LinkedCalendarCreate },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersLinkCalendar>>,
  TError,
  { data: LinkedCalendarCreate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersLinkCalendar>>,
    { data: LinkedCalendarCreate }
  > = (props) => {
    const { data } = props ?? {};

    return usersLinkCalendar(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersLinkCalendarMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersLinkCalendar>>
>;
export type UsersLinkCalendarMutationBody = LinkedCalendarCreate;
export type UsersLinkCalendarMutationError = void | HTTPValidationError;

/**
 * @summary Link Calendar
 */
export const useUsersLinkCalendar = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersLinkCalendar>>,
    TError,
    { data: LinkedCalendarCreate },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions = getUsersLinkCalendarMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Generate an access key for the user schedule
 * @summary Generate User Schedule Key
 */
export const usersGenerateUserScheduleKey = (
  params: UsersGenerateUserScheduleKeyParams,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<_GetScheduleAccessKeyResponse>(
    { url: `/users/me/get-schedule-access-key`, method: "POST", params },
    options,
  );
};

export const getUsersGenerateUserScheduleKeyMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersGenerateUserScheduleKey>>,
    TError,
    { params: UsersGenerateUserScheduleKeyParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersGenerateUserScheduleKey>>,
  TError,
  { params: UsersGenerateUserScheduleKeyParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersGenerateUserScheduleKey>>,
    { params: UsersGenerateUserScheduleKeyParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersGenerateUserScheduleKey(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersGenerateUserScheduleKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersGenerateUserScheduleKey>>
>;

export type UsersGenerateUserScheduleKeyMutationError =
  void | HTTPValidationError;

/**
 * @summary Generate User Schedule Key
 */
export const useUsersGenerateUserScheduleKey = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersGenerateUserScheduleKey>>,
    TError,
    { params: UsersGenerateUserScheduleKeyParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions =
    getUsersGenerateUserScheduleKeyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get all access keys for the user schedule
 * @summary Get User Schedule Keys
 */
export const usersGetUserScheduleKeys = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<ViewUserScheduleKey[]>(
    { url: `/users/me/schedule-access-keys`, method: "GET", signal },
    options,
  );
};

export const getUsersGetUserScheduleKeysQueryKey = () => {
  return [`/users/me/schedule-access-keys`] as const;
};

export const useUsersGetUserScheduleKeysQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGetUserScheduleKeys>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersGetUserScheduleKeys>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersGetUserScheduleKeysQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof usersGetUserScheduleKeys>>
  > = ({ signal }) => usersGetUserScheduleKeys(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof usersGetUserScheduleKeys>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersGetUserScheduleKeysQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersGetUserScheduleKeys>>
>;
export type UsersGetUserScheduleKeysQueryError = void;

/**
 * @summary Get User Schedule Keys
 */
export const useUsersGetUserScheduleKeys = <
  TData = Awaited<ReturnType<typeof usersGetUserScheduleKeys>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof usersGetUserScheduleKeys>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useUsersGetUserScheduleKeysQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete an access key for the user schedule
 * @summary Delete User Schedule Key
 */
export const usersDeleteUserScheduleKey = (
  params: UsersDeleteUserScheduleKeyParams,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<UsersDeleteUserScheduleKey200>(
    { url: `/users/me/schedule-access-key`, method: "DELETE", params },
    options,
  );
};

export const getUsersDeleteUserScheduleKeyMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteUserScheduleKey>>,
    TError,
    { params: UsersDeleteUserScheduleKeyParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersDeleteUserScheduleKey>>,
  TError,
  { params: UsersDeleteUserScheduleKeyParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersDeleteUserScheduleKey>>,
    { params: UsersDeleteUserScheduleKeyParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersDeleteUserScheduleKey(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersDeleteUserScheduleKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersDeleteUserScheduleKey>>
>;

export type UsersDeleteUserScheduleKeyMutationError =
  void | HTTPValidationError;

/**
 * @summary Delete User Schedule Key
 */
export const useUsersDeleteUserScheduleKey = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDeleteUserScheduleKey>>,
    TError,
    { params: UsersDeleteUserScheduleKeyParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions = getUsersDeleteUserScheduleKeyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get a list of all event groups
 * @summary List Event Groups
 */
export const eventGroupsListEventGroups = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<ListEventGroupsResponseInput>(
    { url: `/event-groups/`, method: "GET", signal },
    options,
  );
};

export const getEventGroupsListEventGroupsQueryKey = () => {
  return [`/event-groups/`] as const;
};

export const useEventGroupsListEventGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEventGroupsListEventGroupsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsListEventGroups>>
  > = ({ signal }) => eventGroupsListEventGroups(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type EventGroupsListEventGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsListEventGroups>>
>;
export type EventGroupsListEventGroupsQueryError = unknown;

/**
 * @summary List Event Groups
 */
export const useEventGroupsListEventGroups = <
  TData = Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof eventGroupsListEventGroups>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useEventGroupsListEventGroupsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Event Group
 */
export const eventGroupsCreateEventGroup = (
  createEventGroup: CreateEventGroup,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<ViewEventGroup>(
    {
      url: `/event-groups/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventGroup,
    },
    options,
  );
};

export const getEventGroupsCreateEventGroupMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>,
    TError,
    { data: CreateEventGroup },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>,
  TError,
  { data: CreateEventGroup },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>,
    { data: CreateEventGroup }
  > = (props) => {
    const { data } = props ?? {};

    return eventGroupsCreateEventGroup(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventGroupsCreateEventGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>
>;
export type EventGroupsCreateEventGroupMutationBody = CreateEventGroup;
export type EventGroupsCreateEventGroupMutationError =
  void | HTTPValidationError;

/**
 * @summary Create Event Group
 */
export const useEventGroupsCreateEventGroup = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsCreateEventGroup>>,
    TError,
    { data: CreateEventGroup },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions =
    getEventGroupsCreateEventGroupMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update Event Group
 */
export const eventGroupsUpdateEventGroup = (
  eventGroupId: number,
  updateEventGroup: UpdateEventGroup,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  return axiosQuery<ViewEventGroup>(
    {
      url: `/event-groups/${eventGroupId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateEventGroup,
    },
    options,
  );
};

export const getEventGroupsUpdateEventGroupMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>,
    TError,
    { eventGroupId: number; data: UpdateEventGroup },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>,
  TError,
  { eventGroupId: number; data: UpdateEventGroup },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>,
    { eventGroupId: number; data: UpdateEventGroup }
  > = (props) => {
    const { eventGroupId, data } = props ?? {};

    return eventGroupsUpdateEventGroup(eventGroupId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventGroupsUpdateEventGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>
>;
export type EventGroupsUpdateEventGroupMutationBody = UpdateEventGroup;
export type EventGroupsUpdateEventGroupMutationError =
  void | HTTPValidationError;

/**
 * @summary Update Event Group
 */
export const useEventGroupsUpdateEventGroup = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsUpdateEventGroup>>,
    TError,
    { eventGroupId: number; data: UpdateEventGroup },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions =
    getEventGroupsUpdateEventGroupMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get event group info by id
 * @summary Get Event Group
 */
export const eventGroupsGetEventGroup = (
  eventGroupId: number,
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<ViewEventGroup>(
    { url: `/event-groups/${eventGroupId}`, method: "GET", signal },
    options,
  );
};

export const getEventGroupsGetEventGroupQueryKey = (eventGroupId: number) => {
  return [`/event-groups/${eventGroupId}`] as const;
};

export const useEventGroupsGetEventGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
  TError = void | HTTPValidationError,
>(
  eventGroupId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEventGroupsGetEventGroupQueryKey(eventGroupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsGetEventGroup>>
  > = ({ signal }) =>
    eventGroupsGetEventGroup(eventGroupId, requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type EventGroupsGetEventGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsGetEventGroup>>
>;
export type EventGroupsGetEventGroupQueryError = void | HTTPValidationError;

/**
 * @summary Get Event Group
 */
export const useEventGroupsGetEventGroup = <
  TData = Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
  TError = void | HTTPValidationError,
>(
  eventGroupId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof eventGroupsGetEventGroup>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useEventGroupsGetEventGroupQueryOptions(
    eventGroupId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get event group info by path
 * @summary Find Event Group By Path
 */
export const eventGroupsFindEventGroupByPath = (
  params: EventGroupsFindEventGroupByPathParams,
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<ViewEventGroup>(
    { url: `/event-groups/by-path`, method: "GET", params, signal },
    options,
  );
};

export const getEventGroupsFindEventGroupByPathQueryKey = (
  params: EventGroupsFindEventGroupByPathParams,
) => {
  return [`/event-groups/by-path`, ...(params ? [params] : [])] as const;
};

export const useEventGroupsFindEventGroupByPathQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
  TError = void | HTTPValidationError,
>(
  params: EventGroupsFindEventGroupByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEventGroupsFindEventGroupByPathQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>
  > = ({ signal }) =>
    eventGroupsFindEventGroupByPath(params, requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type EventGroupsFindEventGroupByPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>
>;
export type EventGroupsFindEventGroupByPathQueryError =
  void | HTTPValidationError;

/**
 * @summary Find Event Group By Path
 */
export const useEventGroupsFindEventGroupByPath = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
  TError = void | HTTPValidationError,
>(
  params: EventGroupsFindEventGroupByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof eventGroupsFindEventGroupByPath>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useEventGroupsFindEventGroupByPathQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get event group info by alias
 * @summary Find Event Group By Alias
 */
export const eventGroupsFindEventGroupByAlias = (
  params: EventGroupsFindEventGroupByAliasParams,
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<ViewEventGroup>(
    { url: `/event-groups/by-alias`, method: "GET", params, signal },
    options,
  );
};

export const getEventGroupsFindEventGroupByAliasQueryKey = (
  params: EventGroupsFindEventGroupByAliasParams,
) => {
  return [`/event-groups/by-alias`, ...(params ? [params] : [])] as const;
};

export const useEventGroupsFindEventGroupByAliasQueryOptions = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
  TError = void | HTTPValidationError,
>(
  params: EventGroupsFindEventGroupByAliasParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEventGroupsFindEventGroupByAliasQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>
  > = ({ signal }) =>
    eventGroupsFindEventGroupByAlias(params, requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type EventGroupsFindEventGroupByAliasQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>
>;
export type EventGroupsFindEventGroupByAliasQueryError =
  void | HTTPValidationError;

/**
 * @summary Find Event Group By Alias
 */
export const useEventGroupsFindEventGroupByAlias = <
  TData = Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
  TError = void | HTTPValidationError,
>(
  params: EventGroupsFindEventGroupByAliasParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof eventGroupsFindEventGroupByAlias>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useEventGroupsFindEventGroupByAliasQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Load .ics file to event group by event group id and save file to predefined path
 * @summary Set Event Group Ics
 */
export const eventGroupsSetEventGroupIcs = (
  eventGroupId: number,
  bodyEventGroupsSetEventGroupIcs: BodyEventGroupsSetEventGroupIcs,
  options?: SecondParameter<typeof axiosQuery>,
) => {
  const formData = new FormData();
  formData.append("ics_file", bodyEventGroupsSetEventGroupIcs.ics_file);

  return axiosQuery<void | EventGroupsSetEventGroupIcs201>(
    {
      url: `/event-groups/${eventGroupId}/schedule.ics`,
      method: "PUT",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const getEventGroupsSetEventGroupIcsMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>,
    TError,
    { eventGroupId: number; data: BodyEventGroupsSetEventGroupIcs },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>,
  TError,
  { eventGroupId: number; data: BodyEventGroupsSetEventGroupIcs },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>,
    { eventGroupId: number; data: BodyEventGroupsSetEventGroupIcs }
  > = (props) => {
    const { eventGroupId, data } = props ?? {};

    return eventGroupsSetEventGroupIcs(eventGroupId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventGroupsSetEventGroupIcsMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>
>;
export type EventGroupsSetEventGroupIcsMutationBody =
  BodyEventGroupsSetEventGroupIcs;
export type EventGroupsSetEventGroupIcsMutationError = HTTPValidationError;

/**
 * @summary Set Event Group Ics
 */
export const useEventGroupsSetEventGroupIcs = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventGroupsSetEventGroupIcs>>,
    TError,
    { eventGroupId: number; data: BodyEventGroupsSetEventGroupIcs },
    TContext
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const mutationOptions =
    getEventGroupsSetEventGroupIcsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get a list of all tags
 * @summary List Tags
 */
export const tagsListTags = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<ListTagsResponse>(
    { url: `/tags/`, method: "GET", signal },
    options,
  );
};

export const getTagsListTagsQueryKey = () => {
  return [`/tags/`] as const;
};

export const useTagsListTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof tagsListTags>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tagsListTags>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTagsListTagsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tagsListTags>>> = ({
    signal,
  }) => tagsListTags(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof tagsListTags>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TagsListTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof tagsListTags>>
>;
export type TagsListTagsQueryError = unknown;

/**
 * @summary List Tags
 */
export const useTagsListTags = <
  TData = Awaited<ReturnType<typeof tagsListTags>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof tagsListTags>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useTagsListTagsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the current user
 * @summary Get Current User Schedule
 */
export const icsGetCurrentUserSchedule = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<IcsGetCurrentUserSchedule200One | Blob>(
    { url: `/users/me/all.ics`, method: "GET", signal },
    options,
  );
};

export const getIcsGetCurrentUserScheduleQueryKey = () => {
  return [`/users/me/all.ics`] as const;
};

export const useIcsGetCurrentUserScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetCurrentUserSchedule>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof icsGetCurrentUserSchedule>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIcsGetCurrentUserScheduleQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetCurrentUserSchedule>>
  > = ({ signal }) => icsGetCurrentUserSchedule(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetCurrentUserSchedule>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetCurrentUserScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetCurrentUserSchedule>>
>;
export type IcsGetCurrentUserScheduleQueryError = unknown;

/**
 * @summary Get Current User Schedule
 */
export const useIcsGetCurrentUserSchedule = <
  TData = Awaited<ReturnType<typeof icsGetCurrentUserSchedule>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof icsGetCurrentUserSchedule>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useIcsGetCurrentUserScheduleQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the user; requires access key for `/users/{user_id}/all.ics` resource
 * @summary Get User Schedule
 */
export const icsGetUserSchedule = (
  userId: number,
  params: IcsGetUserScheduleParams,
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<IcsGetUserSchedule200One | Blob>(
    { url: `/users/${userId}/all.ics`, method: "GET", params, signal },
    options,
  );
};

export const getIcsGetUserScheduleQueryKey = (
  userId: number,
  params: IcsGetUserScheduleParams,
) => {
  return [`/users/${userId}/all.ics`, ...(params ? [params] : [])] as const;
};

export const useIcsGetUserScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetUserSchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  params: IcsGetUserScheduleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetUserSchedule>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIcsGetUserScheduleQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetUserSchedule>>
  > = ({ signal }) =>
    icsGetUserSchedule(userId, params, requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetUserSchedule>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetUserScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetUserSchedule>>
>;
export type IcsGetUserScheduleQueryError = void | HTTPValidationError;

/**
 * @summary Get User Schedule
 */
export const useIcsGetUserSchedule = <
  TData = Awaited<ReturnType<typeof icsGetUserSchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  params: IcsGetUserScheduleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetUserSchedule>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useIcsGetUserScheduleQueryOptions(
    userId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the current user
 * @summary Get Music Room Current User Schedule
 */
export const icsGetMusicRoomCurrentUserSchedule = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<IcsGetMusicRoomCurrentUserSchedule200One | Blob>(
    { url: `/users/me/music-room.ics`, method: "GET", signal },
    options,
  );
};

export const getIcsGetMusicRoomCurrentUserScheduleQueryKey = () => {
  return [`/users/me/music-room.ics`] as const;
};

export const useIcsGetMusicRoomCurrentUserScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetMusicRoomCurrentUserSchedule>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof icsGetMusicRoomCurrentUserSchedule>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIcsGetMusicRoomCurrentUserScheduleQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetMusicRoomCurrentUserSchedule>>
  > = ({ signal }) =>
    icsGetMusicRoomCurrentUserSchedule(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetMusicRoomCurrentUserSchedule>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetMusicRoomCurrentUserScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetMusicRoomCurrentUserSchedule>>
>;
export type IcsGetMusicRoomCurrentUserScheduleQueryError = unknown;

/**
 * @summary Get Music Room Current User Schedule
 */
export const useIcsGetMusicRoomCurrentUserSchedule = <
  TData = Awaited<ReturnType<typeof icsGetMusicRoomCurrentUserSchedule>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof icsGetMusicRoomCurrentUserSchedule>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    useIcsGetMusicRoomCurrentUserScheduleQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the user; requires access key for `/users/{user_id}/music-room.ics` resource
 * @summary Get Music Room User Schedule
 */
export const icsGetMusicRoomUserSchedule = (
  userId: number,
  params: IcsGetMusicRoomUserScheduleParams,
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<IcsGetMusicRoomUserSchedule200One | Blob>(
    { url: `/users/${userId}/music-room.ics`, method: "GET", params, signal },
    options,
  );
};

export const getIcsGetMusicRoomUserScheduleQueryKey = (
  userId: number,
  params: IcsGetMusicRoomUserScheduleParams,
) => {
  return [
    `/users/${userId}/music-room.ics`,
    ...(params ? [params] : []),
  ] as const;
};

export const useIcsGetMusicRoomUserScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetMusicRoomUserSchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  params: IcsGetMusicRoomUserScheduleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetMusicRoomUserSchedule>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getIcsGetMusicRoomUserScheduleQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetMusicRoomUserSchedule>>
  > = ({ signal }) =>
    icsGetMusicRoomUserSchedule(userId, params, requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetMusicRoomUserSchedule>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetMusicRoomUserScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetMusicRoomUserSchedule>>
>;
export type IcsGetMusicRoomUserScheduleQueryError = void | HTTPValidationError;

/**
 * @summary Get Music Room User Schedule
 */
export const useIcsGetMusicRoomUserSchedule = <
  TData = Awaited<ReturnType<typeof icsGetMusicRoomUserSchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  params: IcsGetMusicRoomUserScheduleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetMusicRoomUserSchedule>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useIcsGetMusicRoomUserScheduleQueryOptions(
    userId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the current user
 * @summary Get Sport Current User Schedule
 */
export const icsGetSportCurrentUserSchedule = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<IcsGetSportCurrentUserSchedule200One | Blob>(
    { url: `/users/me/sport.ics`, method: "GET", signal },
    options,
  );
};

export const getIcsGetSportCurrentUserScheduleQueryKey = () => {
  return [`/users/me/sport.ics`] as const;
};

export const useIcsGetSportCurrentUserScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetSportCurrentUserSchedule>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof icsGetSportCurrentUserSchedule>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIcsGetSportCurrentUserScheduleQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetSportCurrentUserSchedule>>
  > = ({ signal }) => icsGetSportCurrentUserSchedule(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetSportCurrentUserSchedule>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetSportCurrentUserScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetSportCurrentUserSchedule>>
>;
export type IcsGetSportCurrentUserScheduleQueryError = unknown;

/**
 * @summary Get Sport Current User Schedule
 */
export const useIcsGetSportCurrentUserSchedule = <
  TData = Awaited<ReturnType<typeof icsGetSportCurrentUserSchedule>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof icsGetSportCurrentUserSchedule>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useIcsGetSportCurrentUserScheduleQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the user; requires access key for `/users/{user_id}/sport.ics` resource
 * @summary Get Sport User Schedule
 */
export const icsGetSportUserSchedule = (
  userId: number,
  params: IcsGetSportUserScheduleParams,
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<IcsGetSportUserSchedule200One | Blob>(
    { url: `/users/${userId}/sport.ics`, method: "GET", params, signal },
    options,
  );
};

export const getIcsGetSportUserScheduleQueryKey = (
  userId: number,
  params: IcsGetSportUserScheduleParams,
) => {
  return [`/users/${userId}/sport.ics`, ...(params ? [params] : [])] as const;
};

export const useIcsGetSportUserScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetSportUserSchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  params: IcsGetSportUserScheduleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetSportUserSchedule>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getIcsGetSportUserScheduleQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetSportUserSchedule>>
  > = ({ signal }) =>
    icsGetSportUserSchedule(userId, params, requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetSportUserSchedule>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetSportUserScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetSportUserSchedule>>
>;
export type IcsGetSportUserScheduleQueryError = void | HTTPValidationError;

/**
 * @summary Get Sport User Schedule
 */
export const useIcsGetSportUserSchedule = <
  TData = Awaited<ReturnType<typeof icsGetSportUserSchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  params: IcsGetSportUserScheduleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetSportUserSchedule>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useIcsGetSportUserScheduleQueryOptions(
    userId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the user
 * @summary Get User Linked Schedule
 */
export const icsGetUserLinkedSchedule = (
  userId: number,
  linkedAlias: string,
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<IcsGetUserLinkedSchedule200One | Blob>(
    {
      url: `/users/${userId}/linked/${linkedAlias}.ics`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getIcsGetUserLinkedScheduleQueryKey = (
  userId: number,
  linkedAlias: string,
) => {
  return [`/users/${userId}/linked/${linkedAlias}.ics`] as const;
};

export const useIcsGetUserLinkedScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetUserLinkedSchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  linkedAlias: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetUserLinkedSchedule>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getIcsGetUserLinkedScheduleQueryKey(userId, linkedAlias);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetUserLinkedSchedule>>
  > = ({ signal }) =>
    icsGetUserLinkedSchedule(userId, linkedAlias, requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetUserLinkedSchedule>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetUserLinkedScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetUserLinkedSchedule>>
>;
export type IcsGetUserLinkedScheduleQueryError = void | HTTPValidationError;

/**
 * @summary Get User Linked Schedule
 */
export const useIcsGetUserLinkedSchedule = <
  TData = Awaited<ReturnType<typeof icsGetUserLinkedSchedule>>,
  TError = void | HTTPValidationError,
>(
  userId: number,
  linkedAlias: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetUserLinkedSchedule>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useIcsGetUserLinkedScheduleQueryOptions(
    userId,
    linkedAlias,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get schedule in ICS format for the music room
 * @summary Get Music Room Schedule
 */
export const icsGetMusicRoomSchedule = (
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<Blob>(
    { url: `/music-room.ics`, method: "GET", responseType: "blob", signal },
    options,
  );
};

export const getIcsGetMusicRoomScheduleQueryKey = () => {
  return [`/music-room.ics`] as const;
};

export const useIcsGetMusicRoomScheduleQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetMusicRoomSchedule>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof icsGetMusicRoomSchedule>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getIcsGetMusicRoomScheduleQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetMusicRoomSchedule>>
  > = ({ signal }) => icsGetMusicRoomSchedule(requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetMusicRoomSchedule>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetMusicRoomScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetMusicRoomSchedule>>
>;
export type IcsGetMusicRoomScheduleQueryError = unknown;

/**
 * @summary Get Music Room Schedule
 */
export const useIcsGetMusicRoomSchedule = <
  TData = Awaited<ReturnType<typeof icsGetMusicRoomSchedule>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof icsGetMusicRoomSchedule>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosQuery>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useIcsGetMusicRoomScheduleQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get event group .ics file by id
 * @summary Get Event Group Ics By Alias
 */
export const icsGetEventGroupIcsByAlias = (
  eventGroupAlias: string,
  params: IcsGetEventGroupIcsByAliasParams,
  options?: SecondParameter<typeof axiosQuery>,
  signal?: AbortSignal,
) => {
  return axiosQuery<Blob>(
    {
      url: `/${eventGroupAlias}.ics`,
      method: "GET",
      params,
      responseType: "blob",
      signal,
    },
    options,
  );
};

export const getIcsGetEventGroupIcsByAliasQueryKey = (
  eventGroupAlias: string,
  params: IcsGetEventGroupIcsByAliasParams,
) => {
  return [`/${eventGroupAlias}.ics`, ...(params ? [params] : [])] as const;
};

export const useIcsGetEventGroupIcsByAliasQueryOptions = <
  TData = Awaited<ReturnType<typeof icsGetEventGroupIcsByAlias>>,
  TError = void | HTTPValidationError,
>(
  eventGroupAlias: string,
  params: IcsGetEventGroupIcsByAliasParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetEventGroupIcsByAlias>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getIcsGetEventGroupIcsByAliasQueryKey(eventGroupAlias, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icsGetEventGroupIcsByAlias>>
  > = ({ signal }) =>
    icsGetEventGroupIcsByAlias(eventGroupAlias, params, requestOptions, signal);

  const customOptions = queryOptionsMutator({
    ...queryOptions,
    queryKey,
    queryFn,
  });

  return customOptions as UseQueryOptions<
    Awaited<ReturnType<typeof icsGetEventGroupIcsByAlias>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IcsGetEventGroupIcsByAliasQueryResult = NonNullable<
  Awaited<ReturnType<typeof icsGetEventGroupIcsByAlias>>
>;
export type IcsGetEventGroupIcsByAliasQueryError = void | HTTPValidationError;

/**
 * @summary Get Event Group Ics By Alias
 */
export const useIcsGetEventGroupIcsByAlias = <
  TData = Awaited<ReturnType<typeof icsGetEventGroupIcsByAlias>>,
  TError = void | HTTPValidationError,
>(
  eventGroupAlias: string,
  params: IcsGetEventGroupIcsByAliasParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof icsGetEventGroupIcsByAlias>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosQuery>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useIcsGetEventGroupIcsByAliasQueryOptions(
    eventGroupAlias,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
